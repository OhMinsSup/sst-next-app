// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // binaryTargets = ["native", "linux-arm64-openssl-1.0.x"]
}

datasource db {
  // provider     = "mysql"
  provider     = "sqlite"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id               String            @id @default(cuid())
  name             String?
  username         String?           @unique
  password         String?
  salt             String?
  email            String?           @unique
  emailVerified    DateTime?         @map(name: "email_verified")
  image            String?
  bio              String?
  onboarded        Boolean           @default(false) @map("on_boarded")
  createdAt        DateTime          @default(now()) @map(name: "created_at")
  updatedAt        DateTime          @updatedAt @map(name: "updated_at")
  accounts         Account[]
  sessions         Session[]
  threads          Thread[]
  communities      Community[]
  communityMembers CommunityMember[]

  @@map(name: "users")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @map(name: "user_id")
  type                     String
  provider                 String
  providerAccountId        String  @map(name: "provider_account_id")
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map(name: "session_token")
  userId       String   @map(name: "user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Community {
  id               String            @id @default(cuid())
  username         String
  name             String            @unique
  image            String?
  bio              String?
  creatorId        String            @map(name: "creator_id")
  createdAt        DateTime          @default(now()) @map(name: "created_at")
  updatedAt        DateTime          @updatedAt @map(name: "updated_at")
  creator          User              @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  communityThreads CommunityThread[]
  CommunityMembers CommunityMember[]

  @@index([createdAt], map: "communities_created_at")
  @@index([creatorId])
  @@map(name: "communities")
}

model CommunityThread {
  id          String    @id @default(cuid())
  communityId String    @map(name: "community_id")
  threadId    String    @map(name: "thread_id")
  createdAt   DateTime  @default(now()) @map(name: "created_at")
  updatedAt   DateTime  @updatedAt @map(name: "updated_at")
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  thread      Thread    @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@index([communityId])
  @@index([threadId])
  @@map(name: "community_threads")
}

model CommunityMember {
  id          String    @id @default(cuid())
  communityId String    @map(name: "community_id")
  userId      String    @map(name: "user_id")
  createdAt   DateTime  @default(now()) @map(name: "created_at")
  updatedAt   DateTime  @updatedAt @map(name: "updated_at")
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([communityId])
  @@index([userId])
  @@map(name: "community_members")
}

model Thread {
  id               String            @id @default(cuid())
  text             String
  reply_to         String?
  level            Int?              @default(0)
  has_replies      Boolean           @default(false)
  userId           String            @map(name: "user_id")
  createdAt        DateTime          @default(now()) @map(name: "created_at")
  updatedAt        DateTime          @updatedAt @map(name: "updated_at")
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  communityThreads CommunityThread[]

  @@index([createdAt], map: "threads_created_at")
  @@index([userId])
  @@map(name: "threads")
}
