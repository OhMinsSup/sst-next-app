// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // binaryTargets = ["native", "linux-arm64-openssl-1.0.x"]
}

datasource db {
  // provider     = "mysql"
  provider     = "sqlite"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id            String       @id @default(cuid())
  name          String?
  username      String?      @unique
  password      String?
  salt          String?
  email         String?      @unique
  emailVerified DateTime?    @map(name: "email_verified")
  image         String?
  createdAt     DateTime     @default(now()) @map(name: "created_at")
  updatedAt     DateTime     @updatedAt @map(name: "updated_at")
  accounts      Account[]
  sessions      Session[]
  profile       UserProfile?

  @@map(name: "users")
}

model UserProfile {
  id     String  @id @default(cuid())
  bio    String?
  userId String  @unique @map(name: "user_id")
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @map(name: "user_id")
  type                     String
  provider                 String
  providerAccountId        String  @map(name: "provider_account_id")
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map(name: "session_token")
  userId       String   @map(name: "user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}
