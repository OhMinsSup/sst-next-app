// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(cuid())
  name           String?
  username       String?         @unique
  password       String?
  salt           String?
  email          String?         @unique
  emailVerified  DateTime?       @map(name: "email_verified")
  image          String?
  createdAt      DateTime        @default(now()) @map(name: "created_at")
  updatedAt      DateTime        @updatedAt @map(name: "updated_at")
  accounts       Account[]
  sessions       Session[]
  profile        UserProfile?
  threads        Thread[]
  threadLikes    ThreadLike[]
  threadComments ThreadComment[]

  @@map(name: "users")
}

model UserProfile {
  id     String  @id @default(cuid())
  bio    String?
  userId String  @unique @map(name: "user_id")
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @map(name: "user_id")
  type                     String
  provider                 String
  providerAccountId        String  @map(name: "provider_account_id")
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map(name: "session_token")
  userId       String   @map(name: "user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Thread {
  id        String   @id @default(cuid())
  type      String?  @default("trending") // repost, comment, thread
  text      String
  level     Int?     @default(0)
  deleted   Boolean? @default(false)
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
  userId    String   @map(name: "user_id")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  assets   ThreadAsset[]
  likes    ThreadLike[]
  comments ThreadComment[]

  @@index([createdAt], map: "threads_created_at")
  @@index([deleted])
  @@index([userId, deleted], map: "threads_user_id_deleted")
  @@map(name: "threads")
}

model ThreadBookmark {
  id String @id @default(cuid())
}

model ThreadSetting {
  id                             String   @id @default(cuid())
  threadId                       String   @map(name: "thread_id")
  whoCanLeaveComments            String   @default("everyone") @map(name: "who_can_leave_comments") // everyone, followers, following, nobody
  hiddenNumberOfLikesAndComments Boolean? @default(false) @map(name: "hidden_number_of_likes_and_comments")
  createdAt                      DateTime @default(now()) @map(name: "created_at")
  updatedAt                      DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "thread_settings")
}

model ThreadLike {
  id        String   @id @default(cuid())
  threadId  String   @map(name: "thread_id")
  userId    String   @map(name: "user_id")
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  thread Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([threadId, userId])
  @@index(createdAt)
  @@index(userId)
  @@map(name: "thread_likes")
}

model ThreadComment {
  id        String   @id @default(cuid())
  threadId  String   @map(name: "thread_id")
  commentId String   @map(name: "comment_id")
  userId    String   @map(name: "user_id")
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  comment Thread @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([threadId, commentId])
  @@index([createdAt])
  @@map(name: "thread_comments")
}

model ThreadAsset {
  id        String   @id @default(cuid())
  threadId  String   @map(name: "thread_id")
  fileId    String   @map(name: "file_id")
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
  thread    Thread   @relation(fields: [threadId], references: [id])

  @@unique([threadId, fileId])
  @@map(name: "thread_assets")
}

model File {
  id         String   @id @default(cuid())
  filename   String
  filesize   Int
  filetype   String   @map(name: "file_type")
  publicUrl  String   @map(name: "public_url")
  uploadType String   @map(name: "upload_type")
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "files")
}
